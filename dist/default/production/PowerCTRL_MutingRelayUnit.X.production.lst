

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Jun 26 14:44:17 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x5E,2
    17  0000                     
    18                           ; Version 1.43
    19                           ; Generated 25/07/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F675 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0019                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  008C                     	;# 
    71  008E                     	;# 
    72  0090                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0096                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0019                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  008C                     	;# 
   103  008E                     	;# 
   104  0090                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0096                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  00C8                     __pidataBANK0:	
   119                           
   120                           ;initializer for _standby
   121  00C8  3401               	retlw	1
   122  000E                     _TMR1	set	14
   123  0005                     _GPIO	set	5
   124  0019                     _CMCON	set	25
   125  0010                     _T1CON	set	16
   126  0028                     _GP0	set	40
   127  0029                     _GP1	set	41
   128  002C                     _GP4	set	44
   129  002D                     _GP5	set	45
   130  002A                     _GP2	set	42
   131  005F                     _GIE	set	95
   132  005E                     _PEIE	set	94
   133  0060                     _TMR1IF	set	96
   134  0080                     _TMR1ON	set	128
   135  0096                     _IOC	set	150
   136  0095                     _WPU	set	149
   137  009F                     _ANSEL	set	159
   138  0085                     _TRISIO	set	133
   139  0460                     _TMR1IE	set	1120
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  0010                     start_initialization:	
   145  0010                     __initialization:	
   146                           
   147                           ; Initialize objects allocated to BANK0
   148  0010  20C8               	fcall	__pidataBANK0	;fetch initializer
   149  0011  00B2               	movwf	__pdataBANK0& (0+127)
   150                           
   151                           ; Clear objects allocated to BANK0
   152  0012  01AC               	clrf	__pbssBANK0& (0+127)
   153  0013  01AD               	clrf	(__pbssBANK0+1)& (0+127)
   154  0014  01AE               	clrf	(__pbssBANK0+2)& (0+127)
   155  0015  01AF               	clrf	(__pbssBANK0+3)& (0+127)
   156  0016  01B0               	clrf	(__pbssBANK0+4)& (0+127)
   157  0017  01B1               	clrf	(__pbssBANK0+5)& (0+127)
   158  0018                     end_of_initialization:	
   159                           ;End of C runtime variable initialization code
   160                           
   161  0018                     __end_of__initialization:	
   162  0018  0183               	clrf	3
   163  0019  281A               	ljmp	_main	;jump to C main() function
   164                           
   165                           	psect	bssBANK0
   166  002C                     __pbssBANK0:	
   167  002C                     Switch_CountHIGH@count_ms:	
   168  002C                     	ds	2
   169  002E                     _time_save:	
   170  002E                     	ds	2
   171  0030                     Handler@count:	
   172  0030                     	ds	2
   173                           
   174                           	psect	dataBANK0
   175  0032                     __pdataBANK0:	
   176  0032                     _standby:	
   177  0032                     	ds	1
   178                           
   179                           	psect	cstackCOMMON
   180  0000                     __pcstackCOMMON:	
   181  0000                     ??_Basic_Init:	
   182  0000                     ??_Switch_GetTime:	
   183                           ; 1 bytes @ 0x0
   184                           
   185  0000                     ??_Switch_CountHIGH:	
   186                           ; 1 bytes @ 0x0
   187                           
   188                           
   189                           	psect	cstackBANK0
   190  0020                     __pcstackBANK0:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0020                     ?_Basic_Init:	
   194  0020                     ?_Switch_CountHIGH:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0020                     ?_main:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0020                     ?_Handler:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0020                     ??_Handler:	
   204                           ; 1 bytes @ 0x0
   205                           
   206                           
   207                           ; 1 bytes @ 0x0
   208  0020                     	ds	4
   209  0024                     ?_Switch_GetTime:	
   210                           
   211                           ; 2 bytes @ 0x4
   212  0024                     	ds	2
   213  0026                     Switch_GetTime@time_temp:	
   214                           
   215                           ; 2 bytes @ 0x6
   216  0026                     	ds	2
   217  0028                     ??_main:	
   218                           
   219                           ; 1 bytes @ 0x8
   220  0028                     	ds	3
   221  002B                     main@stat:	
   222                           
   223                           ; 1 bytes @ 0xB
   224  002B                     	ds	1
   225                           
   226                           	psect	maintext
   227  001A                     __pmaintext:	
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 14 in file "main.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;  stat            1   11[BANK0 ] unsigned char 
   238 ;; Return value:  Size  Location     Type
   239 ;;                  1    wreg      void 
   240 ;; Registers used:
   241 ;;		wreg, status,2, status,0, pclath, cstack
   242 ;; Tracked objects:
   243 ;;		On entry : B00/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMMON   BANK0
   247 ;;      Params:         0       0
   248 ;;      Locals:         0       1
   249 ;;      Temps:          0       3
   250 ;;      Totals:         0       4
   251 ;;Total ram usage:        4 bytes
   252 ;; Hardware stack levels required when called:    3
   253 ;; This function calls:
   254 ;;		_Basic_Init
   255 ;;		_Switch_GetTime
   256 ;; This function is called by:
   257 ;;		Startup code after reset
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           
   262                           ;psect for function _main
   263  001A                     _main:	
   264                           
   265                           ;main.c: 16: bool stat;
   266                           ;main.c: 18: Basic_Init();
   267                           
   268                           ;incstack = 0
   269                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   270  001A  20AF               	fcall	_Basic_Init
   271                           
   272                           ;main.c: 20: T1CON = 0x00;
   273  001B  1283               	bcf	3,5	;RP0=0, select bank0
   274  001C  0190               	clrf	16	;volatile
   275                           
   276                           ;main.c: 22: TMR1 = 0xFFFF-1000;
   277  001D  30FC               	movlw	252
   278  001E  008F               	movwf	15	;volatile
   279  001F  3017               	movlw	23
   280  0020  008E               	movwf	14	;volatile
   281                           
   282                           ;main.c: 24: TMR1ON = 1;
   283  0021  1410               	bsf	16,0	;volatile
   284                           
   285                           ;main.c: 26: TMR1IE = 1;
   286  0022  1683               	bsf	3,5	;RP0=1, select bank1
   287  0023  140C               	bsf	12,0	;volatile
   288                           
   289                           ;main.c: 27: TMR1IF = 0;
   290  0024  1283               	bcf	3,5	;RP0=0, select bank0
   291  0025  100C               	bcf	12,0	;volatile
   292                           
   293                           ;main.c: 29: PEIE = 1;
   294  0026  170B               	bsf	11,6	;volatile
   295                           
   296                           ;main.c: 30: GIE = 1;
   297  0027  178B               	bsf	11,7	;volatile
   298  0028                     l673:	
   299                           ;main.c: 32: while(1)
   300                           
   301                           
   302                           ;main.c: 33: {
   303                           ;main.c: 34: stat = (bool)(Switch_GetTime()>100);
   304  0028  20BC               	fcall	_Switch_GetTime
   305  0029  3000               	movlw	0
   306  002A  1283               	bcf	3,5	;RP0=0, select bank0
   307  002B  0225               	subwf	?_Switch_GetTime+1,w
   308  002C  3065               	movlw	101
   309  002D  1903               	skipnz
   310  002E  0224               	subwf	?_Switch_GetTime,w
   311  002F  1C03               	btfss	3,0
   312  0030  2833               	goto	u160
   313  0031  3001               	movlw	1
   314  0032  2834               	goto	u170
   315  0033                     u160:	
   316  0033  3000               	movlw	0
   317  0034                     u170:	
   318  0034  00A8               	movwf	??_main
   319  0035  0828               	movf	??_main,w
   320  0036  00AB               	movwf	main@stat
   321                           
   322                           ;main.c: 36: if(stat&&!GP2)
   323  0037  082B               	movf	main@stat,w
   324  0038  1D03               	btfss	3,2
   325  0039  1905               	btfsc	5,2	;volatile
   326  003A  2854               	goto	l687
   327                           
   328                           ;main.c: 37: {
   329                           ;main.c: 38: GP2 = 1;
   330  003B  1505               	bsf	5,2	;volatile
   331                           
   332                           ;main.c: 39: standby = 0;
   333  003C  01B2               	clrf	_standby
   334                           
   335                           ;main.c: 41: _delay((unsigned long)((2000)*(4000000/4000.0)));
   336  003D  300B               	movlw	11
   337  003E  00AA               	movwf	??_main+2
   338  003F  3026               	movlw	38
   339  0040  00A9               	movwf	??_main+1
   340  0041  305D               	movlw	93
   341  0042  00A8               	movwf	??_main
   342  0043                     u297:	
   343  0043  0BA8               	decfsz	??_main,f
   344  0044  2843               	goto	u297
   345  0045  0BA9               	decfsz	??_main+1,f
   346  0046  2843               	goto	u297
   347  0047  0BAA               	decfsz	??_main+2,f
   348  0048  2843               	goto	u297
   349  0049  284A               	nop2
   350                           
   351                           ;main.c: 43: GP5 = GP4 = 1;
   352  004A  1283               	bcf	3,5	;RP0=0, select bank0
   353  004B  1605               	bsf	5,4	;volatile
   354  004C  1E05               	btfss	5,4	;volatile
   355  004D  2851               	goto	u200
   356  004E  1283               	bcf	3,5	;RP0=0, select bank0
   357  004F  1685               	bsf	5,5	;volatile
   358  0050  2828               	goto	l673
   359  0051                     u200:	
   360  0051  1283               	bcf	3,5	;RP0=0, select bank0
   361  0052  1285               	bcf	5,5	;volatile
   362                           
   363                           ;main.c: 45: }
   364  0053  2828               	goto	l673
   365  0054                     l687:	
   366                           
   367                           ;main.c: 46: else if(stat&&GP2)
   368  0054  082B               	movf	main@stat,w
   369  0055  1D03               	btfss	3,2
   370  0056  1D05               	btfss	5,2	;volatile
   371  0057  2828               	goto	l673
   372                           
   373                           ;main.c: 47: {
   374                           ;main.c: 48: GP5 = GP4 = 0;
   375  0058  1205               	bcf	5,4	;volatile
   376  0059  1285               	bcf	5,5	;volatile
   377                           
   378                           ;main.c: 50: _delay((unsigned long)((1000)*(4000000/4000.0)));
   379  005A  3006               	movlw	6
   380  005B  00AA               	movwf	??_main+2
   381  005C  3013               	movlw	19
   382  005D  00A9               	movwf	??_main+1
   383  005E  30AD               	movlw	173
   384  005F  00A8               	movwf	??_main
   385  0060                     u307:	
   386  0060  0BA8               	decfsz	??_main,f
   387  0061  2860               	goto	u307
   388  0062  0BA9               	decfsz	??_main+1,f
   389  0063  2860               	goto	u307
   390  0064  0BAA               	decfsz	??_main+2,f
   391  0065  2860               	goto	u307
   392  0066  2867               	nop2
   393                           
   394                           ;main.c: 52: GP2 = 0;
   395  0067  1283               	bcf	3,5	;RP0=0, select bank0
   396  0068  1105               	bcf	5,2	;volatile
   397                           
   398                           ;main.c: 53: standby = 1;
   399  0069  01B2               	clrf	_standby
   400  006A  0AB2               	incf	_standby,f
   401  006B  2828               	goto	l673
   402  006C                     __end_of_main:	
   403                           
   404                           	psect	text1
   405  00BC                     __ptext1:	
   406 ;; *************** function _Switch_GetTime *****************
   407 ;; Defined at:
   408 ;;		line 26 in file "DetectSwitch.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  time_temp       2    6[BANK0 ] unsigned int 
   413 ;; Return value:  Size  Location     Type
   414 ;;                  2    4[BANK0 ] unsigned int 
   415 ;; Registers used:
   416 ;;		wreg, status,2
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0
   422 ;;      Params:         0       2
   423 ;;      Locals:         0       2
   424 ;;      Temps:          0       0
   425 ;;      Totals:         0       4
   426 ;;Total ram usage:        4 bytes
   427 ;; Hardware stack levels used:    1
   428 ;; Hardware stack levels required when called:    2
   429 ;; This function calls:
   430 ;;		Nothing
   431 ;; This function is called by:
   432 ;;		_main
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           
   437                           ;psect for function _Switch_GetTime
   438  00BC                     _Switch_GetTime:	
   439                           
   440                           ;DetectSwitch.c: 28: uint16_t time_temp = time_save;
   441                           
   442                           ;incstack = 0
   443                           ; Regs used in _Switch_GetTime: [wreg+status,2]
   444  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   445  00BD  082F               	movf	_time_save+1,w
   446  00BE  00A7               	movwf	Switch_GetTime@time_temp+1
   447  00BF  082E               	movf	_time_save,w
   448  00C0  00A6               	movwf	Switch_GetTime@time_temp
   449                           
   450                           ;DetectSwitch.c: 30: time_save = 0;
   451  00C1  01AE               	clrf	_time_save
   452  00C2  01AF               	clrf	_time_save+1
   453                           
   454                           ;DetectSwitch.c: 32: return time_temp;
   455  00C3  0827               	movf	Switch_GetTime@time_temp+1,w
   456  00C4  00A5               	movwf	?_Switch_GetTime+1
   457  00C5  0826               	movf	Switch_GetTime@time_temp,w
   458  00C6  00A4               	movwf	?_Switch_GetTime
   459  00C7  0008               	return
   460  00C8                     __end_of_Switch_GetTime:	
   461                           
   462                           	psect	text2
   463  00AF                     __ptext2:	
   464 ;; *************** function _Basic_Init *****************
   465 ;; Defined at:
   466 ;;		line 58 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0
   480 ;;      Params:         0       0
   481 ;;      Locals:         0       0
   482 ;;      Temps:          0       0
   483 ;;      Totals:         0       0
   484 ;;Total ram usage:        0 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; Hardware stack levels required when called:    2
   487 ;; This function calls:
   488 ;;		Nothing
   489 ;; This function is called by:
   490 ;;		_main
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494                           
   495                           ;psect for function _Basic_Init
   496  00AF                     _Basic_Init:	
   497                           
   498                           ;main.c: 60: TRISIO = 0x01;
   499                           
   500                           ;incstack = 0
   501                           ; Regs used in _Basic_Init: [wreg+status,2]
   502  00AF  3001               	movlw	1
   503  00B0  1683               	bsf	3,5	;RP0=1, select bank1
   504  00B1  0085               	movwf	5	;volatile
   505                           
   506                           ;main.c: 61: CMCON = 0x07;
   507  00B2  3007               	movlw	7
   508  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   509  00B4  0099               	movwf	25	;volatile
   510                           
   511                           ;main.c: 62: ANSEL = 0x00;
   512  00B5  1683               	bsf	3,5	;RP0=1, select bank1
   513  00B6  019F               	clrf	31	;volatile
   514                           
   515                           ;main.c: 63: WPU = 0x00;
   516  00B7  0195               	clrf	21	;volatile
   517                           
   518                           ;main.c: 64: IOC = 0x00;
   519  00B8  0196               	clrf	22	;volatile
   520                           
   521                           ;main.c: 66: GPIO = 0x00;
   522  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   523  00BA  0185               	clrf	5	;volatile
   524  00BB  0008               	return
   525  00BC                     __end_of_Basic_Init:	
   526                           
   527                           	psect	text3
   528  006C                     __ptext3:	
   529 ;; *************** function _Handler *****************
   530 ;; Defined at:
   531 ;;		line 69 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, status,2, status,0, pclath, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0
   545 ;;      Params:         0       0
   546 ;;      Locals:         0       0
   547 ;;      Temps:          0       4
   548 ;;      Totals:         0       4
   549 ;;Total ram usage:        4 bytes
   550 ;; Hardware stack levels used:    1
   551 ;; Hardware stack levels required when called:    1
   552 ;; This function calls:
   553 ;;		_Switch_CountHIGH
   554 ;; This function is called by:
   555 ;;		Interrupt level 1
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           
   560                           ;psect for function _Handler
   561  006C                     _Handler:	
   562                           
   563                           ;main.c: 71: static uint16_t count = 0;
   564                           ;main.c: 73: if((++count>1000)&&standby)
   565  006C  3001               	movlw	1
   566  006D  07B0               	addwf	Handler@count,f
   567  006E  1803               	skipnc
   568  006F  0AB1               	incf	Handler@count+1,f
   569  0070  3000               	movlw	0
   570  0071  07B1               	addwf	Handler@count+1,f
   571  0072  3003               	movlw	3
   572  0073  0231               	subwf	Handler@count+1,w
   573  0074  30E9               	movlw	233
   574  0075  1903               	skipnz
   575  0076  0230               	subwf	Handler@count,w
   576  0077  1C03               	skipc
   577  0078  2881               	goto	i1l707
   578  0079  0832               	movf	_standby,w
   579  007A  1903               	btfsc	3,2
   580  007B  2881               	goto	i1l707
   581                           
   582                           ;main.c: 74: {
   583                           ;main.c: 75: count = 0;
   584  007C  01B0               	clrf	Handler@count
   585  007D  01B1               	clrf	Handler@count+1
   586                           
   587                           ;main.c: 76: GP1 = !GP1;
   588  007E  3002               	movlw	2
   589  007F  0685               	xorwf	5,f
   590                           
   591                           ;main.c: 77: }
   592  0080  2885               	goto	i1l66
   593  0081                     i1l707:	
   594                           
   595                           ;main.c: 78: else if(standby==0)
   596  0081  0832               	movf	_standby,w
   597  0082  1D03               	btfss	3,2
   598  0083  2885               	goto	i1l66
   599                           
   600                           ;main.c: 79: {
   601                           ;main.c: 80: GP1 = 0;
   602  0084  1085               	bcf	5,1	;volatile
   603  0085                     i1l66:	
   604                           
   605                           ;main.c: 81: }
   606                           ;main.c: 82: if(TMR1IF&&TMR1IE)
   607  0085  1C0C               	btfss	12,0	;volatile
   608  0086  2892               	goto	i1l69
   609  0087  1683               	bsf	3,5	;RP0=1, select bank1
   610  0088  1C0C               	btfss	12,0	;volatile
   611  0089  2892               	goto	i1l69
   612                           
   613                           ;main.c: 83: {
   614                           ;main.c: 84: TMR1 = 0xFFFF-1000;
   615  008A  30FC               	movlw	252
   616  008B  1283               	bcf	3,5	;RP0=0, select bank0
   617  008C  008F               	movwf	15	;volatile
   618  008D  3017               	movlw	23
   619  008E  008E               	movwf	14	;volatile
   620                           
   621                           ;main.c: 86: Switch_CountHIGH();
   622  008F  209E               	fcall	_Switch_CountHIGH
   623                           
   624                           ;main.c: 88: TMR1IF = 0;
   625  0090  1283               	bcf	3,5	;RP0=0, select bank0
   626  0091  100C               	bcf	12,0	;volatile
   627  0092                     i1l69:	
   628  0092  1283               	bcf	3,5	;RP0=0, select bank0
   629  0093  0823               	movf	??_Handler+3,w
   630  0094  00DF               	movwf	95
   631  0095  0822               	movf	??_Handler+2,w
   632  0096  008A               	movwf	10
   633  0097  0821               	movf	??_Handler+1,w
   634  0098  0084               	movwf	4
   635  0099  0E20               	swapf	??_Handler^0,w
   636  009A  0083               	movwf	3
   637  009B  0EDE               	swapf	94,f
   638  009C  0E5E               	swapf	94,w
   639  009D  0009               	retfie
   640  009E                     __end_of_Handler:	
   641                           
   642                           	psect	intentry
   643  0004                     __pintentry:	
   644                           ;incstack = 0
   645                           ; Regs used in _Handler: [wreg+status,2+status,0+pclath+cstack]
   646                           
   647  0004                     interrupt_function:	
   648  005E                     saved_w	set	btemp
   649  0004  00DE               	movwf	btemp
   650  0005  0E03               	swapf	3,w
   651  0006  1283               	bcf	3,5	;RP0=0, select bank0
   652  0007  00A0               	movwf	??_Handler
   653  0008  0804               	movf	4,w
   654  0009  00A1               	movwf	??_Handler+1
   655  000A  080A               	movf	10,w
   656  000B  00A2               	movwf	??_Handler+2
   657  000C  085F               	movf	btemp+1,w
   658  000D  00A3               	movwf	??_Handler+3
   659  000E  286C               	ljmp	_Handler
   660                           
   661                           	psect	text4
   662  009E                     __ptext4:	
   663 ;; *************** function _Switch_CountHIGH *****************
   664 ;; Defined at:
   665 ;;		line 11 in file "DetectSwitch.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMMON   BANK0
   679 ;;      Params:         0       0
   680 ;;      Locals:         0       0
   681 ;;      Temps:          0       0
   682 ;;      Totals:         0       0
   683 ;;Total ram usage:        0 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; This function calls:
   686 ;;		Nothing
   687 ;; This function is called by:
   688 ;;		_Handler
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           
   693                           ;psect for function _Switch_CountHIGH
   694  009E                     _Switch_CountHIGH:	
   695                           
   696                           ;DetectSwitch.c: 13: static uint16_t count_ms = 0;
   697                           ;DetectSwitch.c: 15: if(!GP0)
   698                           
   699                           ;incstack = 0
   700                           ; Regs used in _Switch_CountHIGH: [wreg+status,2]
   701  009E  1283               	bcf	3,5	;RP0=0, select bank0
   702  009F  1805               	btfsc	5,0	;volatile
   703  00A0  28A8               	goto	i1l653
   704                           
   705                           ;DetectSwitch.c: 16: {
   706                           ;DetectSwitch.c: 17: count_ms++;
   707  00A1  3001               	movlw	1
   708  00A2  07AC               	addwf	Switch_CountHIGH@count_ms,f
   709  00A3  1803               	skipnc
   710  00A4  0AAD               	incf	Switch_CountHIGH@count_ms+1,f
   711  00A5  3000               	movlw	0
   712  00A6  07AD               	addwf	Switch_CountHIGH@count_ms+1,f
   713                           
   714                           ;DetectSwitch.c: 18: }
   715  00A7  0008               	return
   716  00A8                     i1l653:	
   717                           
   718                           ;DetectSwitch.c: 19: else
   719                           ;DetectSwitch.c: 20: {
   720                           ;DetectSwitch.c: 21: time_save = count_ms;
   721  00A8  082D               	movf	Switch_CountHIGH@count_ms+1,w
   722  00A9  00AF               	movwf	_time_save+1
   723  00AA  082C               	movf	Switch_CountHIGH@count_ms,w
   724  00AB  00AE               	movwf	_time_save
   725                           
   726                           ;DetectSwitch.c: 22: count_ms = 0;
   727  00AC  01AC               	clrf	Switch_CountHIGH@count_ms
   728  00AD  01AD               	clrf	Switch_CountHIGH@count_ms+1
   729  00AE  0008               	return
   730  00AF                     __end_of_Switch_CountHIGH:	
   731  005E                     btemp	set	94	;btemp
   732  005E                     wtemp0	set	94


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     12      19

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Handler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Switch_GetTime

Critical Paths under _Handler in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      68
                                              8 BANK0      4     4      0
                         _Basic_Init
                     _Switch_GetTime
 ---------------------------------------------------------------------------------
 (1) _Switch_GetTime                                       4     2      2      23
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Handler                                              4     4      0       0
                                              0 BANK0      4     4      0
                   _Switch_CountHIGH
 ---------------------------------------------------------------------------------
 (3) _Switch_CountHIGH                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _Switch_GetTime

 _Handler (ROOT)
   _Switch_CountHIGH

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E      C      13       4       30.6%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      13       6        0.0%
ABS                  0      0      13       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Jun 26 14:44:17 2018

               __CFG_CP$ON 0000    __size_of_Switch_GetTime 000C                __CFG_CPD$ON 0000  
                      l673 0028                        l687 0054                        _GP0 0028  
                      _GP1 0029                        _GP2 002A                        _GP4 002C  
                      _GP5 002D                        _GIE 005F                        _IOC 0096  
                      u200 0051                        u160 0033                        u170 0034  
                      u307 0060                        u297 0043                        _WPU 0095  
                      fsr0 0004                 _Basic_Init 00AF                       _GPIO 0005  
                     _PEIE 005E                       i1l66 0085                       i1l69 0092  
                     _TMR1 000E                       _main 001A                       btemp 005E  
            __CFG_BOREN$ON 0000                       start 000F            __end_of_Handler 009E  
            __CFG_MCLRE$ON 0000   __end_of_Switch_CountHIGH 00AF                      ?_main 0020  
 Switch_CountHIGH@count_ms 002C              __CFG_WDTE$OFF 0000                      _CMCON 0019  
                    _ANSEL 009F                      _T1CON 0010                      i1l707 0081  
                    i1l653 00A8              __CFG_PWRTE$ON 0000                      pclath 000A  
                    status 0003                      wtemp0 005E            __initialization 0010  
             __end_of_main 006C                     ??_main 0028                ?_Basic_Init 0020  
                   _TMR1IE 0460                     _TMR1IF 0060                  ??_Handler 0020  
                   _TMR1ON 0080                     _TRISIO 0085             _Switch_GetTime 00BC  
                   saved_w 005E    __end_of__initialization 0018     __end_of_Switch_GetTime 00C8  
           __pcstackCOMMON 0000        __size_of_Basic_Init 000D               __pidataBANK0 00C8  
               __pbssBANK0 002C                 __pmaintext 001A            ?_Switch_GetTime 0024  
               __pintentry 0004          ?_Switch_CountHIGH 0020         ??_Switch_CountHIGH 0000  
  Switch_GetTime@time_temp 0026                    _Handler 006C                    __ptext1 00BC  
                  __ptext2 00AF                    __ptext3 006C                    __ptext4 009E  
             ??_Basic_Init 0000                    _standby 0032       end_of_initialization 0018  
       __end_of_Basic_Init 00BC        start_initialization 0010           ??_Switch_GetTime 0000  
              __pdataBANK0 0032                  ___latbits 0000              __pcstackBANK0 0020  
__size_of_Switch_CountHIGH 0011                   ?_Handler 0020          interrupt_function 0004  
                _time_save 002E               Handler@count 0030           __size_of_Handler 0032  
         _Switch_CountHIGH 009E              __size_of_main 0052                   main@stat 002B  
                 intlevel1 0000          __CFG_FOSC$INTRCIO 0000  
