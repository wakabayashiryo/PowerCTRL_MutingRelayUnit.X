

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Apr 14 11:04:12 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x5E,2
    15  0000                     
    16                           ; Version 1.43
    17                           ; Generated 25/07/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F675 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0019                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  008C                     	;# 
    69  008E                     	;# 
    70  0090                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0096                     	;# 
    74  0099                     	;# 
    75  009A                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0019                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  008C                     	;# 
   101  008E                     	;# 
   102  0090                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0096                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  000E                     _TMR1	set	14
   115  0005                     _GPIO	set	5
   116  0019                     _CMCON	set	25
   117  0010                     _T1CON	set	16
   118  0028                     _GP0	set	40
   119  002C                     _GP4	set	44
   120  002D                     _GP5	set	45
   121  0029                     _GP1	set	41
   122  002A                     _GP2	set	42
   123  005F                     _GIE	set	95
   124  005E                     _PEIE	set	94
   125  0060                     _TMR1IF	set	96
   126  0080                     _TMR1ON	set	128
   127  0096                     _IOC	set	150
   128  0095                     _WPU	set	149
   129  009F                     _ANSEL	set	159
   130  0085                     _TRISIO	set	133
   131  0460                     _TMR1IE	set	1120
   132                           
   133                           ; #config settings
   134  0000                     
   135                           	psect	cinit
   136  0010                     start_initialization:	
   137  0010                     __initialization:	
   138                           
   139                           ; Clear objects allocated to BANK0
   140  0010  1283               	bcf	3,5	;RP0=0, select bank0
   141  0011  01AC               	clrf	__pbssBANK0& (0+127)
   142  0012  01AD               	clrf	(__pbssBANK0+1)& (0+127)
   143  0013  01AE               	clrf	(__pbssBANK0+2)& (0+127)
   144  0014  01AF               	clrf	(__pbssBANK0+3)& (0+127)
   145  0015                     end_of_initialization:	
   146                           ;End of C runtime variable initialization code
   147                           
   148  0015                     __end_of__initialization:	
   149  0015  0183               	clrf	3
   150  0016  2817               	ljmp	_main	;jump to C main() function
   151                           
   152                           	psect	bssBANK0
   153  002C                     __pbssBANK0:	
   154  002C                     Switch_CountHIGH@count_ms:	
   155  002C                     	ds	2
   156  002E                     _time_save:	
   157  002E                     	ds	2
   158                           
   159                           	psect	cstackCOMMON
   160  0000                     __pcstackCOMMON:	
   161  0000                     ??_Basic_Init:	
   162  0000                     ??_Switch_GetTime:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  0000                     ??_Switch_CountHIGH:	
   166                           ; 1 bytes @ 0x0
   167                           
   168                           
   169                           	psect	cstackBANK0
   170  0020                     __pcstackBANK0:	
   171                           ; 1 bytes @ 0x0
   172                           
   173  0020                     ?_Basic_Init:	
   174  0020                     ?_Switch_CountHIGH:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0020                     ?_main:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  0020                     ?_Handler:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0020                     ??_Handler:	
   184                           ; 1 bytes @ 0x0
   185                           
   186                           
   187                           ; 1 bytes @ 0x0
   188  0020                     	ds	4
   189  0024                     ?_Switch_GetTime:	
   190                           
   191                           ; 2 bytes @ 0x4
   192  0024                     	ds	2
   193  0026                     Switch_GetTime@time_temp:	
   194                           
   195                           ; 2 bytes @ 0x6
   196  0026                     	ds	2
   197  0028                     ??_main:	
   198                           
   199                           ; 1 bytes @ 0x8
   200  0028                     	ds	3
   201  002B                     main@stat:	
   202                           
   203                           ; 1 bytes @ 0xB
   204  002B                     	ds	1
   205                           
   206                           	psect	maintext
   207  0017                     __pmaintext:	
   208 ;;
   209 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   210 ;;
   211 ;; *************** function _main *****************
   212 ;; Defined at:
   213 ;;		line 12 in file "main.c"
   214 ;; Parameters:    Size  Location     Type
   215 ;;		None
   216 ;; Auto vars:     Size  Location     Type
   217 ;;  stat            1   11[BANK0 ] unsigned char 
   218 ;; Return value:  Size  Location     Type
   219 ;;                  1    wreg      void 
   220 ;; Registers used:
   221 ;;		wreg, status,2, status,0, pclath, cstack
   222 ;; Tracked objects:
   223 ;;		On entry : B00/0
   224 ;;		On exit  : 0/0
   225 ;;		Unchanged: 0/0
   226 ;; Data sizes:     COMMON   BANK0
   227 ;;      Params:         0       0
   228 ;;      Locals:         0       1
   229 ;;      Temps:          0       3
   230 ;;      Totals:         0       4
   231 ;;Total ram usage:        4 bytes
   232 ;; Hardware stack levels required when called:    3
   233 ;; This function calls:
   234 ;;		_Basic_Init
   235 ;;		_Switch_GetTime
   236 ;; This function is called by:
   237 ;;		Startup code after reset
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           
   242                           ;psect for function _main
   243  0017                     _main:	
   244                           
   245                           ;main.c: 14: bool stat;
   246                           ;main.c: 16: Basic_Init();
   247                           
   248                           ;incstack = 0
   249                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   250  0017  2092               	fcall	_Basic_Init
   251                           
   252                           ;main.c: 18: T1CON = 0x00;
   253  0018  1283               	bcf	3,5	;RP0=0, select bank0
   254  0019  0190               	clrf	16	;volatile
   255                           
   256                           ;main.c: 20: TMR1 = 0xFFFF-1000;
   257  001A  30FC               	movlw	252
   258  001B  008F               	movwf	15	;volatile
   259  001C  3017               	movlw	23
   260  001D  008E               	movwf	14	;volatile
   261                           
   262                           ;main.c: 22: TMR1ON = 1;
   263  001E  1410               	bsf	16,0	;volatile
   264                           
   265                           ;main.c: 24: TMR1IE = 1;
   266  001F  1683               	bsf	3,5	;RP0=1, select bank1
   267  0020  140C               	bsf	12,0	;volatile
   268                           
   269                           ;main.c: 25: TMR1IF = 0;
   270  0021  1283               	bcf	3,5	;RP0=0, select bank0
   271  0022  100C               	bcf	12,0	;volatile
   272                           
   273                           ;main.c: 27: PEIE = 1;
   274  0023  170B               	bsf	11,6	;volatile
   275                           
   276                           ;main.c: 28: GIE = 1;
   277  0024  178B               	bsf	11,7	;volatile
   278  0025                     l654:	
   279                           ;main.c: 30: while(1)
   280                           
   281                           
   282                           ;main.c: 31: {
   283                           ;main.c: 32: stat = (bool)(Switch_GetTime()>100);
   284  0025  209F               	fcall	_Switch_GetTime
   285  0026  3000               	movlw	0
   286  0027  1283               	bcf	3,5	;RP0=0, select bank0
   287  0028  0225               	subwf	?_Switch_GetTime+1,w
   288  0029  3065               	movlw	101
   289  002A  1903               	skipnz
   290  002B  0224               	subwf	?_Switch_GetTime,w
   291  002C  1C03               	btfss	3,0
   292  002D  2830               	goto	u130
   293  002E  3001               	movlw	1
   294  002F  2831               	goto	u140
   295  0030                     u130:	
   296  0030  3000               	movlw	0
   297  0031                     u140:	
   298  0031  00A8               	movwf	??_main
   299  0032  0828               	movf	??_main,w
   300  0033  00AB               	movwf	main@stat
   301                           
   302                           ;main.c: 34: if(stat&&!GP2)
   303  0034  082B               	movf	main@stat,w
   304  0035  1D03               	btfss	3,2
   305  0036  1905               	btfsc	5,2	;volatile
   306  0037  2851               	goto	l666
   307                           
   308                           ;main.c: 35: {
   309                           ;main.c: 36: GP2 = 1;
   310  0038  1505               	bsf	5,2	;volatile
   311                           
   312                           ;main.c: 37: GP1 = 1;
   313  0039  1485               	bsf	5,1	;volatile
   314                           
   315                           ;main.c: 39: _delay((unsigned long)((2000)*(4000000/4000.0)));
   316  003A  300B               	movlw	11
   317  003B  00AA               	movwf	??_main+2
   318  003C  3026               	movlw	38
   319  003D  00A9               	movwf	??_main+1
   320  003E  305D               	movlw	93
   321  003F  00A8               	movwf	??_main
   322  0040                     u237:	
   323  0040  0BA8               	decfsz	??_main,f
   324  0041  2840               	goto	u237
   325  0042  0BA9               	decfsz	??_main+1,f
   326  0043  2840               	goto	u237
   327  0044  0BAA               	decfsz	??_main+2,f
   328  0045  2840               	goto	u237
   329  0046  2847               	nop2
   330                           
   331                           ;main.c: 41: GP5 = GP4 = 1;
   332  0047  1283               	bcf	3,5	;RP0=0, select bank0
   333  0048  1605               	bsf	5,4	;volatile
   334  0049  1E05               	btfss	5,4	;volatile
   335  004A  284E               	goto	u170
   336  004B  1283               	bcf	3,5	;RP0=0, select bank0
   337  004C  1685               	bsf	5,5	;volatile
   338  004D  2825               	goto	l654
   339  004E                     u170:	
   340  004E  1283               	bcf	3,5	;RP0=0, select bank0
   341  004F  1285               	bcf	5,5	;volatile
   342                           
   343                           ;main.c: 43: }
   344  0050  2825               	goto	l654
   345  0051                     l666:	
   346                           
   347                           ;main.c: 44: else if(stat&&GP2)
   348  0051  082B               	movf	main@stat,w
   349  0052  1D03               	btfss	3,2
   350  0053  1D05               	btfss	5,2	;volatile
   351  0054  2825               	goto	l654
   352                           
   353                           ;main.c: 45: {
   354                           ;main.c: 46: GP5 = GP4 = 0;
   355  0055  1205               	bcf	5,4	;volatile
   356  0056  1285               	bcf	5,5	;volatile
   357                           
   358                           ;main.c: 48: _delay((unsigned long)((1000)*(4000000/4000.0)));
   359  0057  3006               	movlw	6
   360  0058  00AA               	movwf	??_main+2
   361  0059  3013               	movlw	19
   362  005A  00A9               	movwf	??_main+1
   363  005B  30AD               	movlw	173
   364  005C  00A8               	movwf	??_main
   365  005D                     u247:	
   366  005D  0BA8               	decfsz	??_main,f
   367  005E  285D               	goto	u247
   368  005F  0BA9               	decfsz	??_main+1,f
   369  0060  285D               	goto	u247
   370  0061  0BAA               	decfsz	??_main+2,f
   371  0062  285D               	goto	u247
   372  0063  2864               	nop2
   373                           
   374                           ;main.c: 50: GP2 = 0;
   375  0064  1283               	bcf	3,5	;RP0=0, select bank0
   376  0065  1105               	bcf	5,2	;volatile
   377                           
   378                           ;main.c: 51: GP1 = 0;
   379  0066  1085               	bcf	5,1	;volatile
   380  0067  2825               	goto	l654
   381  0068                     __end_of_main:	
   382                           
   383                           	psect	text1
   384  009F                     __ptext1:	
   385 ;; *************** function _Switch_GetTime *****************
   386 ;; Defined at:
   387 ;;		line 26 in file "DetectSwitch.c"
   388 ;; Parameters:    Size  Location     Type
   389 ;;		None
   390 ;; Auto vars:     Size  Location     Type
   391 ;;  time_temp       2    6[BANK0 ] unsigned int 
   392 ;; Return value:  Size  Location     Type
   393 ;;                  2    4[BANK0 ] unsigned int 
   394 ;; Registers used:
   395 ;;		wreg, status,2
   396 ;; Tracked objects:
   397 ;;		On entry : 0/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMMON   BANK0
   401 ;;      Params:         0       2
   402 ;;      Locals:         0       2
   403 ;;      Temps:          0       0
   404 ;;      Totals:         0       4
   405 ;;Total ram usage:        4 bytes
   406 ;; Hardware stack levels used:    1
   407 ;; Hardware stack levels required when called:    2
   408 ;; This function calls:
   409 ;;		Nothing
   410 ;; This function is called by:
   411 ;;		_main
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           
   416                           ;psect for function _Switch_GetTime
   417  009F                     _Switch_GetTime:	
   418                           
   419                           ;DetectSwitch.c: 28: uint16_t time_temp = time_save;
   420                           
   421                           ;incstack = 0
   422                           ; Regs used in _Switch_GetTime: [wreg+status,2]
   423  009F  1283               	bcf	3,5	;RP0=0, select bank0
   424  00A0  082F               	movf	_time_save+1,w
   425  00A1  00A7               	movwf	Switch_GetTime@time_temp+1
   426  00A2  082E               	movf	_time_save,w
   427  00A3  00A6               	movwf	Switch_GetTime@time_temp
   428                           
   429                           ;DetectSwitch.c: 30: time_save = 0;
   430  00A4  01AE               	clrf	_time_save
   431  00A5  01AF               	clrf	_time_save+1
   432                           
   433                           ;DetectSwitch.c: 32: return time_temp;
   434  00A6  0827               	movf	Switch_GetTime@time_temp+1,w
   435  00A7  00A5               	movwf	?_Switch_GetTime+1
   436  00A8  0826               	movf	Switch_GetTime@time_temp,w
   437  00A9  00A4               	movwf	?_Switch_GetTime
   438  00AA  0008               	return
   439  00AB                     __end_of_Switch_GetTime:	
   440                           
   441                           	psect	text2
   442  0092                     __ptext2:	
   443 ;; *************** function _Basic_Init *****************
   444 ;; Defined at:
   445 ;;		line 56 in file "main.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;		None
   448 ;; Auto vars:     Size  Location     Type
   449 ;;		None
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, status,2
   454 ;; Tracked objects:
   455 ;;		On entry : 0/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMMON   BANK0
   459 ;;      Params:         0       0
   460 ;;      Locals:         0       0
   461 ;;      Temps:          0       0
   462 ;;      Totals:         0       0
   463 ;;Total ram usage:        0 bytes
   464 ;; Hardware stack levels used:    1
   465 ;; Hardware stack levels required when called:    2
   466 ;; This function calls:
   467 ;;		Nothing
   468 ;; This function is called by:
   469 ;;		_main
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           
   474                           ;psect for function _Basic_Init
   475  0092                     _Basic_Init:	
   476                           
   477                           ;main.c: 58: TRISIO = 0x01;
   478                           
   479                           ;incstack = 0
   480                           ; Regs used in _Basic_Init: [wreg+status,2]
   481  0092  3001               	movlw	1
   482  0093  1683               	bsf	3,5	;RP0=1, select bank1
   483  0094  0085               	movwf	5	;volatile
   484                           
   485                           ;main.c: 59: CMCON = 0x07;
   486  0095  3007               	movlw	7
   487  0096  1283               	bcf	3,5	;RP0=0, select bank0
   488  0097  0099               	movwf	25	;volatile
   489                           
   490                           ;main.c: 60: ANSEL = 0x00;
   491  0098  1683               	bsf	3,5	;RP0=1, select bank1
   492  0099  019F               	clrf	31	;volatile
   493                           
   494                           ;main.c: 61: WPU = 0x00;
   495  009A  0195               	clrf	21	;volatile
   496                           
   497                           ;main.c: 62: IOC = 0x00;
   498  009B  0196               	clrf	22	;volatile
   499                           
   500                           ;main.c: 64: GPIO = 0x00;
   501  009C  1283               	bcf	3,5	;RP0=0, select bank0
   502  009D  0185               	clrf	5	;volatile
   503  009E  0008               	return
   504  009F                     __end_of_Basic_Init:	
   505                           
   506                           	psect	text3
   507  0068                     __ptext3:	
   508 ;; *************** function _Handler *****************
   509 ;; Defined at:
   510 ;;		line 67 in file "main.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;		None
   513 ;; Auto vars:     Size  Location     Type
   514 ;;		None
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, status,2, status,0, pclath, cstack
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMMON   BANK0
   524 ;;      Params:         0       0
   525 ;;      Locals:         0       0
   526 ;;      Temps:          0       4
   527 ;;      Totals:         0       4
   528 ;;Total ram usage:        4 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; Hardware stack levels required when called:    1
   531 ;; This function calls:
   532 ;;		_Switch_CountHIGH
   533 ;; This function is called by:
   534 ;;		Interrupt level 1
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538                           
   539                           ;psect for function _Handler
   540  0068                     _Handler:	
   541                           
   542                           ;main.c: 69: if(TMR1IF&&TMR1IE)
   543  0068  1C0C               	btfss	12,0	;volatile
   544  0069  2875               	goto	i1l62
   545  006A  1683               	bsf	3,5	;RP0=1, select bank1
   546  006B  1C0C               	btfss	12,0	;volatile
   547  006C  2875               	goto	i1l62
   548                           
   549                           ;main.c: 70: {
   550                           ;main.c: 71: TMR1 = 0xFFFF-1000;
   551  006D  30FC               	movlw	252
   552  006E  1283               	bcf	3,5	;RP0=0, select bank0
   553  006F  008F               	movwf	15	;volatile
   554  0070  3017               	movlw	23
   555  0071  008E               	movwf	14	;volatile
   556                           
   557                           ;main.c: 73: Switch_CountHIGH();
   558  0072  2081               	fcall	_Switch_CountHIGH
   559                           
   560                           ;main.c: 75: TMR1IF = 0;
   561  0073  1283               	bcf	3,5	;RP0=0, select bank0
   562  0074  100C               	bcf	12,0	;volatile
   563  0075                     i1l62:	
   564  0075  1283               	bcf	3,5	;RP0=0, select bank0
   565  0076  0823               	movf	??_Handler+3,w
   566  0077  00DF               	movwf	95
   567  0078  0822               	movf	??_Handler+2,w
   568  0079  008A               	movwf	10
   569  007A  0821               	movf	??_Handler+1,w
   570  007B  0084               	movwf	4
   571  007C  0E20               	swapf	??_Handler^0,w
   572  007D  0083               	movwf	3
   573  007E  0EDE               	swapf	94,f
   574  007F  0E5E               	swapf	94,w
   575  0080  0009               	retfie
   576  0081                     __end_of_Handler:	
   577                           
   578                           	psect	intentry
   579  0004                     __pintentry:	
   580                           ;incstack = 0
   581                           ; Regs used in _Handler: [wreg+status,2+status,0+pclath+cstack]
   582                           
   583  0004                     interrupt_function:	
   584  005E                     saved_w	set	btemp
   585  0004  00DE               	movwf	btemp
   586  0005  0E03               	swapf	3,w
   587  0006  1283               	bcf	3,5	;RP0=0, select bank0
   588  0007  00A0               	movwf	??_Handler
   589  0008  0804               	movf	4,w
   590  0009  00A1               	movwf	??_Handler+1
   591  000A  080A               	movf	10,w
   592  000B  00A2               	movwf	??_Handler+2
   593  000C  085F               	movf	btemp+1,w
   594  000D  00A3               	movwf	??_Handler+3
   595  000E  2868               	ljmp	_Handler
   596                           
   597                           	psect	text4
   598  0081                     __ptext4:	
   599 ;; *************** function _Switch_CountHIGH *****************
   600 ;; Defined at:
   601 ;;		line 11 in file "DetectSwitch.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;		None
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, status,2
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMMON   BANK0
   615 ;;      Params:         0       0
   616 ;;      Locals:         0       0
   617 ;;      Temps:          0       0
   618 ;;      Totals:         0       0
   619 ;;Total ram usage:        0 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; This function calls:
   622 ;;		Nothing
   623 ;; This function is called by:
   624 ;;		_Handler
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           
   629                           ;psect for function _Switch_CountHIGH
   630  0081                     _Switch_CountHIGH:	
   631                           
   632                           ;DetectSwitch.c: 13: static uint16_t count_ms = 0;
   633                           ;DetectSwitch.c: 15: if(!GP0)
   634                           
   635                           ;incstack = 0
   636                           ; Regs used in _Switch_CountHIGH: [wreg+status,2]
   637  0081  1283               	bcf	3,5	;RP0=0, select bank0
   638  0082  1805               	btfsc	5,0	;volatile
   639  0083  288B               	goto	i1l634
   640                           
   641                           ;DetectSwitch.c: 16: {
   642                           ;DetectSwitch.c: 17: count_ms++;
   643  0084  3001               	movlw	1
   644  0085  07AC               	addwf	Switch_CountHIGH@count_ms,f
   645  0086  1803               	skipnc
   646  0087  0AAD               	incf	Switch_CountHIGH@count_ms+1,f
   647  0088  3000               	movlw	0
   648  0089  07AD               	addwf	Switch_CountHIGH@count_ms+1,f
   649                           
   650                           ;DetectSwitch.c: 18: }
   651  008A  0008               	return
   652  008B                     i1l634:	
   653                           
   654                           ;DetectSwitch.c: 19: else
   655                           ;DetectSwitch.c: 20: {
   656                           ;DetectSwitch.c: 21: time_save = count_ms;
   657  008B  082D               	movf	Switch_CountHIGH@count_ms+1,w
   658  008C  00AF               	movwf	_time_save+1
   659  008D  082C               	movf	Switch_CountHIGH@count_ms,w
   660  008E  00AE               	movwf	_time_save
   661                           
   662                           ;DetectSwitch.c: 22: count_ms = 0;
   663  008F  01AC               	clrf	Switch_CountHIGH@count_ms
   664  0090  01AD               	clrf	Switch_CountHIGH@count_ms+1
   665  0091  0008               	return
   666  0092                     __end_of_Switch_CountHIGH:	
   667  005E                     btemp	set	94	;btemp
   668  005E                     wtemp0	set	94


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     12      16

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Handler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Switch_GetTime

Critical Paths under _Handler in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      68
                                              8 BANK0      4     4      0
                         _Basic_Init
                     _Switch_GetTime
 ---------------------------------------------------------------------------------
 (1) _Switch_GetTime                                       4     2      2      23
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Handler                                              4     4      0       0
                                              0 BANK0      4     4      0
                   _Switch_CountHIGH
 ---------------------------------------------------------------------------------
 (3) _Switch_CountHIGH                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _Switch_GetTime

 _Handler (ROOT)
   _Switch_CountHIGH

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      C      10       4       25.8%
ABS                  0      0      10       5        0.0%
DATA                 0      0      10       6        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Apr 14 11:04:12 2018

               __CFG_CP$ON 0000    __size_of_Switch_GetTime 000C                __CFG_CPD$ON 0000  
                      l654 0025                        l666 0051                        _GP0 0028  
                      _GP1 0029                        _GP2 002A                        _GP4 002C  
                      _GP5 002D                        _GIE 005F                        _IOC 0096  
                      u130 0030                        u140 0031                        u170 004E  
                      u237 0040                        u247 005D                        _WPU 0095  
                      fsr0 0004                 _Basic_Init 0092                       _GPIO 0005  
                     _PEIE 005E                       i1l62 0075                       _TMR1 000E  
                     _main 0017                       btemp 005E              __CFG_BOREN$ON 0000  
                     start 000F            __end_of_Handler 0081              __CFG_MCLRE$ON 0000  
 __end_of_Switch_CountHIGH 0092                      ?_main 0020   Switch_CountHIGH@count_ms 002C  
            __CFG_WDTE$OFF 0000                      _CMCON 0019                      _ANSEL 009F  
                    _T1CON 0010                      i1l634 008B              __CFG_PWRTE$ON 0000  
                    pclath 000A                      status 0003                      wtemp0 005E  
          __initialization 0010               __end_of_main 0068                     ??_main 0028  
              ?_Basic_Init 0020                     _TMR1IE 0460                     _TMR1IF 0060  
                ??_Handler 0020                     _TMR1ON 0080                     _TRISIO 0085  
           _Switch_GetTime 009F                     saved_w 005E    __end_of__initialization 0015  
   __end_of_Switch_GetTime 00AB             __pcstackCOMMON 0000        __size_of_Basic_Init 000D  
               __pbssBANK0 002C                 __pmaintext 0017            ?_Switch_GetTime 0024  
               __pintentry 0004          ?_Switch_CountHIGH 0020         ??_Switch_CountHIGH 0000  
  Switch_GetTime@time_temp 0026                    _Handler 0068                    __ptext1 009F  
                  __ptext2 0092                    __ptext3 0068                    __ptext4 0081  
             ??_Basic_Init 0000       end_of_initialization 0015         __end_of_Basic_Init 009F  
      start_initialization 0010           ??_Switch_GetTime 0000                  ___latbits 0000  
            __pcstackBANK0 0020  __size_of_Switch_CountHIGH 0011                   ?_Handler 0020  
        interrupt_function 0004                  _time_save 002E           __size_of_Handler 0019  
         _Switch_CountHIGH 0081              __size_of_main 0051                   main@stat 002B  
                 intlevel1 0000          __CFG_FOSC$INTRCIO 0000  
